// =============== Variables ==================

const myBetsDiv = document.querySelector(".bets")
const lines = document.querySelectorAll(".line")
const right_section = document.querySelector(".right")
const placedBets = document.querySelector(".content")
const numberOfBets = document.querySelector(".nb")
const puttinInput = document.querySelector(".putting_input")
const odds = document.querySelector(".odds_value")
const gains = document.querySelector(".gain_value")
const placing = document.querySelector(".placing")
const moon = document.querySelector(".fa-moon")
const gear = document.querySelector(".fa-gear")
const left = document.querySelector(".left")
const country = document.querySelector(".country")
const yourBets = document.querySelector(".your_bets")
let int = 0

let on_off = localStorage.getItem('switch') || "VRAI"
console.log(`on_off vaut ${on_off}`);

// =============== Mes tableaux d'objets ==================

let myBets = []

//============== FONCTIONS =================

// permet d'ajouter la classe "dark" si les div et sections suivantes n'en contiennent pas. Si les div et sections contiennent d√©j√† la classe "dark", alors celle-ci est retir√©e.
const switchMode = () => {
  left.classList.toggle('dark')
  moon.classList.toggle('dark')
  gear.classList.toggle('dark')
  country.classList.toggle('dark')
  yourBets.classList.toggle('dark')
  myBetsDiv.classList.toggle('dark')
}

// √† partir du data-index de la ligne √† supprimer qu'on a r√©cup√©r√©e pr√©c√©demment, on peut (1)supprimer la ligne de pari dans Your bets, gr√¢ce √† splice(), (2)enlever la surbrillance de la cote qui lui correspond dans le grand tableau affich√© √† gauche dans myBetsDiv
const deleteLine = (lineToKill) => {

  let match_id_target = myBets[lineToKill].match_id // on cherche la valeur du match_id de cette ligne de pari
  
  myBetsDiv.querySelector(`[match-id="${match_id_target}"]`).querySelector('.purple').classList.remove('purple') //on va chercher dans myBetsDiv la ligne qui poss√®de le m√™me match_id. On retire ensuite la coloration "purple" de la case coch√©e pr√©sente sur cette ligne

  myBets.splice(lineToKill, 1) //line to kill correspond √† l'endroit o√π est entam√©e la coupure dans le tableau myBets, le chiffre 1 indique la longeur de cette coupure √† savoir 1 ligne. 
  printAllBets(myBets) // on affiche la version actualis√©e de myBets
  printNumberOfBets(myBets) // on affiche le nombre de paris dans le titre de Your bets
  totOdds(myBets) // on calcule le total des cotes
  totGain(totOdds(myBets)) // on calcule le total des gains
  if (myBets.length === 0) {
    placing.classList.add('hidden') // si la somme des paris est √©gale √† z√©ro, on retire l'affichage de la partie placing
  }
}

const totGain = (nb) => {
  let gain = puttinInput.value * nb // on fait le produit de l'argent mis√© et du nombre nb (correspondant au produit des cotes)
  gains.innerHTML = Math.round(gain * 100) / 100 //on arrondit le r√©sultat des gains potentiels, pour obtenir un nombre √† deux d√©cimales. On injecte ce nombre dans le DOM
}

const totOdds = (tab) => {
  let prod = 1
  tab.forEach(function(element) {
  prod *= element.odd 
  }) // on calcule le produit de chaque cote du tableau
  odds.innerHTML = Math.round(prod * 100) / 100
  //on arrondit le r√©sultat, pour obtenir un nombre √† deux d√©cimales et on l'injecte dans le DOM. On injecte ce nombre dans le DOM
  console.log(`le produit vaut : ${prod}`);
  return prod //on retourne la valeur du produit des cotes qui nous servira plus tard dans la fonction totGain()
}

// permet d'ajouter dans le tableau myBets, une nouvelle ligne de pari avec ses dif√©rentes caract√©ristiques
const addBetLine = (qui, contrequi, combien, resultat, lequel) => {
  let newBetLine = {
      home : qui,
      away : contrequi,
      odd : combien,
      result : resultat,
      match_id : lequel,
  }
  myBets.push(newBetLine)
  console.log(myBets);
}

// g√©n√®re un nombre al√©atoire entre min & max
const randomIntFromInterval = (min, max) =>{ 
  return Math.floor(Math.random() * (max - min + 1) + min)
}

// g√©n√®re une image d'arri√®re plan au hasard, √† partir d'une s√©lection de 3 images et ce √† l'aide du nombre au hasard entre 1 et 3 g√©n√©r√© par randomIntFromInterval()
const generateRandomBackGround = () => {
  int = randomIntFromInterval(1, 3)
  console.log(`int vaut ${int}`);
  right_section.style.backgroundImage = `url(../images/bg${int}.png)`
}

// affiche dans une petite fen√™tre en bas √† droite, dans la partie "Your bets", le nombre de paris r√©alis√©s
const printNumberOfBets = (tab) => {
  numberOfBets.innerHTML = `${parseInt(tab.length)}`
} 

// affiche le tableau des paris "myBets" dans la section "Your bets".
const printAllBets = (tab) => {
  placedBets.innerHTML = '' // permet de remettre l'affichage du tableau √† z√©ro
  printNumberOfBets(tab)
  if (myBets.length > 0) {
    placedBets.style.padding = "15px" // permet de mettre un padding de 15px sur la section placed bets
 
    tab.forEach((tabElement, index) => {
      if (tabElement.result === "win") {
        placedBets.innerHTML +=
        `<div class="single-line" data-index="${index}"><div class="calc"><b>${tabElement.home}</b><div class="bin">${tabElement.odd}<span class="delete" style="cursor:pointer">üóëÔ∏è</span></div></div><div class="teams">${tabElement.home} - ${tabElement.away}</div></div>`
      }
      else if (tabElement.result === "dra") {
        placedBets.innerHTML +=
        `<div class="single-line" data-index="${index}"><div class="calc"><b>Match Nul</b><div class="bin">${tabElement.odd}<span class="delete" style="cursor:pointer">üóëÔ∏è</span></div></div><div class="teams">${tabElement.home} - ${tabElement.away}</div></div>`
      }
      else if (tabElement.result === "los") {
        placedBets.innerHTML +=
        `<div class="single-line" data-index="${index}"><div class="calc"><b>${tabElement.away}</b><div class="bin">${tabElement.odd}<span class="delete" style="cursor:pointer">üóëÔ∏è</span></div></div><div class="teams">${tabElement.home} - ${tabElement.away}</div></div>`
      } 
      // poser les 3 conditions 'win' 'draw' ou 'loss' permet d'afficher l'√©quipe pour laquelle on a pari√© une victoire ou le cas √©ch√©ant "Match nul"
    });
  }
  else {
    placedBets.style.padding = "0px" // on remet le padding de la partie "placed bets" √† z√©ro si le nombre de paris plac√©s est nul.
  }
 }

//============== Extraction fichier JSON ==========

fetch(`scripts/datas.json`)
  .then(response => response.json())
  .then(data => {
    console.log(data);

    const display = () => {
      data.matchs.forEach(function(singleBet) {
        myBetsDiv.innerHTML += `<div class="line" match-id="${singleBet.match_id}">
        <div class="game">
            <div class="home">${singleBet.hometeam}</div>
            <div>-</div>
            <div class="visitor">${singleBet.awayteam}</div>
        </div>
        <div class="win button">${singleBet.home_odd}</div>
        <div class="dra button">${singleBet.draw_odd}</div>
        <div class="los button">${singleBet.away_odd}</div>
        </div>
    </div>`
      });
    }

    // on appelle la fonction display, au chargement du fichier datas.json, pour que les rencontres et leurs diff√©rentes cotes s'affichent dans le DOM
    display()

    //============== EVENTS (inclus dans le fetch) =================


    // Permet de s√©lectionner victoire OU √©galit√© OU d√©faite sur  chaque recontre. Gr√¢ce √† la d√©l√©gation d'√©v√®nement sur la div '. bets', on peut ajouter ou retirer la classe "purple" au bouton sur lequel on a cliqu√©.
    myBetsDiv.addEventListener('click', function(e) {
      if(e.target.classList.contains('button')) {
        
        if (e.target.classList.contains('purple')) {
          
          e.target.classList.remove('purple')

          // Le but ici est de supprimer dans le tableau d'objets myBets, la ligne correspondant au bouton qu'on vient de "d√©selectionner". Pour se faire, il faut chercher l'index de la ligne qui a √©t√© ajout√©e dans le tableau lorsque l'on a auparavant activ√© ce bouton.
         
          // On cherche d'abord la valeur du 'match-id' de la div sur laquelle on a cliqu√©

          const matchId = parseInt(e.target.closest(".line").getAttribute("match-id"));
          
          // On cherche ensuite dans le tableau myBets, la ligne qui poss√®de poss√®de la m√™me valeur de match_id. En d'autres termes, on doit retrouver la ligne qui reprend le pari qui a √©t√© fait sur cette rencontre.

          // la fonction findIndex permet de retrouver l'index de la ligne qui poss√®de en "match_id" la m√™me valeur que la constante matchId, soit l'ID du match sur lequel on vient de cliquer dans la div '.bets' (situ√©e dans le DOM). Si aucune ligne n'a un "match_id" √©gal √† la constante 'matchID', alors l'index sera √©gal √† -1 qu'on peut consid√©rer comme un message d'erreur.
          
          const isSameId = (element) => element.match_id === matchId

          const index = myBets.findIndex(isSameId)
          
          // Une fois l'index de la ligne identifi√©, on supprime la ligne cibl√©e du tableau myBets avec l'outil array.splice(). Le chiffre 1 apr√®s 'index' repr√©sente le nombre de lignes √† retirer. En effet, il ne faut √¥ter qu'une seule ligne √† partir du rep√®re indiqu√© par la constante 'index'

          if (index !== -1) {
            myBets.splice(index, 1);
          }
          else {
            console.log(`Erreur sur findIndex!!!`)
          }

          // on affiche enfin dans le DOM le tableau myBets actualis√©, gr√¢ce √† la fct printAllBets

          printAllBets(myBets);
        }
      
        else {

          // Permet d'extraire le match et ses propri√©t√©s (√©quipes, cotes home/draw/away, etc), en fonction de sa place ("data-index") dans le tableau contenu dans le fichier JSO      
          let i = parseInt(e.target.closest(".line").getAttribute("match-id")) - 1 // on doit soustraire - 1, car le premi√®re ligne du tableau a pour coordonn√©e 0 
          let home = data.matchs[i].hometeam
          let away = data.matchs[i].awayteam
          let odd = parseFloat(e.target.innerHTML)
          let result = e.target.getAttribute("class").slice(0, 3)
          let match_index = i + 1  // en faisant i + 1, on retrouve la valeur        "match-id"

          if (e.target.parentElement.querySelector('.purple')) {
            
            // On d√©coche la case de pari qui √©tait s√©lectionn√©e √† la base, c√†d avant qu'on ne clique sur une autre cote.
            e.target.parentElement.querySelector('.purple').classList.remove('purple');

            //Ici, m√™me principe que plus haut o√π on doit retirer la ligne de la section "Your bets" correspondant √† la cote qui vient d'√™tre d√©coch√©e.
            const matchId = parseInt(e.target.closest(".line").getAttribute("match-id"));
            const isSameId = (element) => element.match_id === matchId
            const index = myBets.findIndex(isSameId)
            if (index !== -1) {
              myBets.splice(index, 1);
            }

            // On ajoute la surbrillance √† la case de pari sur laquelle on vient de cliquer
            e.target.classList.add('purple')

            // On ajoute une ligne de pari dans le tableau myBets avec toutes les coordonn√©es sauv√©es plus haut.
            addBetLine(home, away, odd, result, match_index)

            // On affiche le tableau actualis√©, dans la section "Your Bets"
            printAllBets(myBets)
          }
          else {
            // Dans le cas o√π aucun bouton de la div line n'√©tait en surbrillance (classe contenant "purple"), on ajoute la classe "purple" au bouton sur lequel on vient de cliquer pour qu'il apparaisse en surbrillance
            e.target.classList.add('purple')


            // On ajoute une ligne de pari dans le tableau myBets avec toutes les coordonn√©es sauv√©es plus haut.
            addBetLine(home, away, odd, result, match_index)

            // On affiche le tableau actualis√©, dans la section "Your Bets"
            printAllBets(myBets)
          }
        }
        // on calcule ensuite le total des cotes en les multipliants unes √† l'unes. Mais seulement si le nombre de paris est sup√©rieur √† 0
        if (myBets.length > 0) {
          console.log(`myBets est plus long que 0`);
          totOdds(myBets)
          totGain(totOdds(myBets))
          placing.classList.remove('hidden')
        }
        // si le nombre de paris est √©gal √† 0, on remet les c√¥tes et les gains √† z√©ro et on ajoute la classe "hidden" pour que la div "placing" n'apparaisse plus.
        else {
          odds.innerHTML = "0.00"
          gains.innerHTML = "0.00"
          placing.classList.add('hidden')
        } 
      } 
    })

  })
  .catch(error => {console.log("Erreur lors de la r√©cup des donn√©es :", error);
  })

  


//================ FONCTIONS enclench√©es au chargement de la page =============

//G√©n√®re une image d'arri√®re plan au hasard d√®s l'ouverture de la page
generateRandomBackGround()


// Si on_off est FAUX d√®s l'ouverture de la page, c√†d si la derni√®re valeur stock√©e dans le localStorage avant la fermeture de la page √©tait "FAUX" , alors le switchMode s'enclenche et la page se met automatiquement en Dark Mode. L'utilisateur conserve ainsi l'apparence de la page avant sa pr√©c√©dente fermeture.

if (on_off === "FAUX") {
  switchMode()
}

//=============================== EVENTS============================ 

// Lorsqu'on modifie la valeur de l'input dans "Your bets", cet √©v√®nement enclenche le calcul et l'affichage de la valeur total des gains potentiels. Si le nombre de paris introduits vaut 0, les valeurs des cotes et des gains totaux est remis √† z√©ro
puttinInput.addEventListener("input", (event) => {
  if (myBets.length > 0) {
    totGain(totOdds(myBets)) 
  }
  else {
    odds.innerHTML = "0.00"
    gains.innerHTML = "0.00"
  }
});



//Si on appuye sur le sigle üóëÔ∏è, cet √©v√®nement permet de supprimer gr√¢ce √† la fonction deleteLine() la ligne de pari sur laquelle on se trouve. La suppression se fait autant √† l'affichage dans la section "Your bets" que dans le tableau myBets.
placedBets.addEventListener('click', function(e) {
  if (e.target.classList.contains('delete')) {
    let placeDansTableau = parseInt(e.target.closest('.single-line').getAttribute('data-index')) // on capte la position de la ligne gr√¢ce √† son attribut data-index
    console.log(`placeDansTableau vaut : `);
    console.log(placeDansTableau);
    deleteLine(placeDansTableau)
  }
});

//Lorsque l'on appuye sur le sigle lune, le dark mode s'enclenche gr√¢ce √† la fct switchMode. On conserve aussi l'information qu'on se trouve dans le dark mode (on_off = "FAUX") en la stockant dans le localStorage
moon.addEventListener('click', function() {
  switchMode()
  on_off = "FAUX"
  localStorage.setItem('switch', "FAUX")
  console.log(`on_off vaut ${on_off}`);
})

//Lorsque l'on appuye sur le sigle roue dent√©e, le day-time mode s'enclenche gr√¢ce √† la fct switchMode. On conserve aussi l'information qu'on se trouve dans le day-time (on_off = "VRAI") en la stockant dans le localStorage
gear.addEventListener('click', function() {
  switchMode()
  on_off = "VRAI"
  localStorage.setItem('switch', "VRAI")
  console.log(`on_off vaut ${on_off}`);
})